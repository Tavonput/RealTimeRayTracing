#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_ARB_gpu_shader_int64 : require

#extension GL_ARB_shader_clock : enable

#include "structures.glsl"
#include "random.glsl"

// Payload out
layout (location = 0) rayPayloadEXT hitPayloadPath payload;

// Set 0 - TLAS and out image
layout (set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout (set = 0, binding = 1, rgba32f) uniform image2D image;

// Set 1 - Global unifrom information
layout (set = 1, binding = 0) uniform _GlobalUniform { GlobalUniform uni; };

// Push constant
layout (push_constant) uniform _RtxPushConstant { RtxPushConstant pc; };

vec2 sampleUniformDiskConcentric(vec2 u)
{
    vec2 uOffset = 2 * u - vec2(1, 1);
    if (uOffset.x == 0 && uOffset.y == 0)
        return vec2(0.0, 0.0);

    float theta, r;
    if (abs(uOffset.x) > abs(uOffset.y))
    {
        r = uOffset.x;
        theta = PI * (uOffset.y / uOffset.x) / 4;
    }
    else
    {
        r = uOffset.y;
        theta = (PI / 2) - (PI * (uOffset.x / uOffset.y) / 4);
    }
    
    return r * vec2(cos(theta), sin(theta));
}

void main() 
{
    // Random number seed
    payload.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

    // Accumulation hit value
    vec3 color = vec3(0);

    for (int smpl = 0; smpl < pc.sampleCount; smpl++)
    {
        // Compute jitter
        float r1   = rnd(payload.seed);
        float r2   = rnd(payload.seed);
        vec2  subPixelJitter = vec2(r1, r2) * 2.0 - 1.0;

        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subPixelJitter;
        const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
        vec2       coord       = inUV * 2.0 - 1.0;

        // Origin in camera space
        vec4 origin = vec4(0, 0, 0, 1);

        // Direction in camera space
        vec4 target    = uni.projInverse * vec4(coord.x, coord.y, 1, 1);
        vec4 direction = vec4(normalize(target.xyz), 0);

        // Compute defocus offset and focal point
        float r3 = rnd(payload.seed) * 2.0 - 1.0;
        float r4 = rnd(payload.seed) * 2.0 - 1.0;
        vec2 defocusOffset = pc.lensRadius * vec2(r3, r4);
        vec3 focalPoint    = origin.xyz + direction.xyz * pc.focalDistance;

        // Set new origin and direction
        origin    = vec4(defocusOffset, 0.0, 1.0);
        direction = vec4(normalize(focalPoint - origin.xyz), 0);

        // Camera space to world space
        origin    = uni.viewInverse * origin;
        direction = uni.viewInverse * direction;

        uint  rayFlags = gl_RayFlagsNoneEXT;
        float tMin     = 0.001;
        float tMax     = 10000.0;

        payload.depth       = 0;
        payload.emission    = vec3(0);
        payload.throughput  = vec3(1.0);
        payload.done        = 1;
        payload.rayOrigin   = origin.xyz;
        payload.rayDir      = direction.xyz;

        // Iteratively trace rays
        while (true)
        {
            traceRayEXT(
                topLevelAS,     // acceleration structure
                rayFlags,       // rayFlags
                0xFF,           // cullMask
                0,              // sbtRecordOffset
                0,              // sbtRecordStride
                0,              // missIndex
                origin.xyz,     // ray origin
                tMin,           // ray min range
                direction.xyz,  // ray direction
                tMax,           // ray max range
                0               // payload location
            );

            // TODO: 
            // Move computations into glsl files.
            // Keep track if previous bounce was perfectly specular? (Look more into this)
            // Look into russian roulette more.
            // Update throughput then add, or add then update throughput?

            // Russian roulette
            if (pc.russianRoulette < 1 && payload.depth >= 2)
            {
                float survival = max(max(payload.throughput.x, payload.throughput.y), payload.throughput.z);
                survival = max(survival, pc.russianRoulette); 
                if (rnd(payload.seed) > survival)
                    break;
                payload.throughput *= 1 / (survival + 0.0001);
            }
     
            // Update accumlation      
            color += payload.emission * payload.throughput;

            // Path terminiation if we miss or reach the maximum depth
            payload.depth++;
            if (payload.done == 1 || payload.depth >= pc.maxDepth)
                break;

            // Update for next ray
            origin.xyz    = payload.rayOrigin;
            direction.xyz = payload.rayDir;
            payload.done  = 1;
        }
    }

    color /= pc.sampleCount;

    // Accumulate over previous frame
    if(pc.frame > 0)
    {
        float a         = 1.0 / float(pc.frame + 1);
        vec3  oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, color, a), 1.0));
    }
    else
    {
        // First frame
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
    }
}
