#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_ARB_gpu_shader_int64 : require

#include "structures.glsl"
#include "random.glsl"

// Payload out
layout (location = 0) rayPayloadEXT hitPayload payload;

// Set 0 - TLAS and out image
layout (set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout (set = 0, binding = 1, rgba32f) uniform image2D image;

// Set 1 - Global unifrom information
layout (set = 1, binding = 0) uniform _GlobalUniform { GlobalUniform uni; };

// Push constant
layout (push_constant) uniform _RtxPushConstant { RtxPushConstant pc; };

void main() 
{
    // Random number seed
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pc.frame);

    vec3 hitValue = vec3(0);

    for (int smpl = 0; smpl < pc.sampleCount; smpl++)
    {
        // Compute jitter
        float r1   = rnd(seed);
        float r2   = rnd(seed);
        vec2  subPixelJitter = pc.frame == 0 ? vec2(0.5) : vec2(r1, r2);

        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subPixelJitter;
        const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
        vec2       coord       = inUV * 2.0 - 1.0;

        vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
        vec4 target    = uni.projInverse * vec4(coord.x, coord.y, 1, 1);
        vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);

        uint  rayFlags = gl_RayFlagsOpaqueEXT;
        float tMin     = 0.001;
        float tMax     = 10000.0;

        payload.depth       = 0;
        payload.hitValue    = vec3(0);
        payload.attenuation = vec3(1.0, 1.0, 1.0);
        payload.done        = 1;
        payload.rayOrigin   = origin.xyz;
        payload.rayDir      = direction.xyz;

        // Iteratively trace rays for reflections
        while (true)
        {
            traceRayEXT(
                topLevelAS,     // acceleration structure
                rayFlags,       // rayFlags
                0xFF,           // cullMask
                0,              // sbtRecordOffset
                0,              // sbtRecordStride
                0,              // missIndex
                origin.xyz,     // ray origin
                tMin,           // ray min range
                direction.xyz,  // ray direction
                tMax,           // ray max range
                0               // payload location
            );

            hitValue += payload.hitValue * payload.attenuation;

            payload.depth++;
            if (payload.done == 1 || payload.depth >= pc.maxDepth)
                break;

            origin.xyz    = payload.rayOrigin;
            direction.xyz = payload.rayDir;
            payload.done  = 1;
        }
    }

    hitValue /= pc.sampleCount;

    // Accumulate over previous frame
    if(pc.frame > 0)
    {
        float a         = 1.0 / float(pc.frame + 1);
        vec3  oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, hitValue, a), 1.0));
    }
    else
    {
        // First frame
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.f));
    }
}
